# ALL TEMPERATURES IN CELSIUS
#
# All type equations from NIST ITS-90 Thermocouple Database except type C, which was derived from table given on 
# OMEGA catalog tables for type C, based on NIST Monograph 175, revised for ITS-90, pages Z218-220
class Iec60584
  MAX_ITERATIONS =   10
  EMF_EQUATIONS  = 
    { 
      b: [ { range: 0.0..630.615,
                 c: [  0.000000000000e+00, -0.246508183460e-03,  0.590404211710e-05,
                      -0.132579316360e-08,  0.156682919010e-11, -0.169445292400e-14,
                       0.629903470940e-18 ] },
           { range: 630.615..1820.0,
                 c: [ -0.389381686210e+01,  0.285717474700e-01, -0.848851047850e-04,
                       0.157852801640e-06, -0.168353448640e-09,  0.111097940130e-12,
                      -0.445154310330e-16,  0.989756408210e-20, -0.937913302890e-24 ] } ],
      c: [ { range: 0.0..2320.0,
                 c: [ -3.109077870000e-04,  1.338547130000e-02,  1.226236040000e-05,
                      -1.050537530000e-08,  3.613274640000e-12, -4.990804550000e-16,
                       6.434651840000e-22 ] } ],
      e: [ { range: -270.0..0.0,
                 c: [  0.000000000000e+00,  0.586655087080e-01,  0.454109771240e-04,
                      -0.779980486860e-06, -0.258001608430e-07, -0.594525830570e-09,
                      -0.932140586670e-11, -0.102876055340e-12, -0.803701236210e-15,
                      -0.439794973910e-17, -0.164147763550e-19, -0.396736195160e-22,
                      -0.558273287210e-25, -0.346578420130e-28 ] },
           { range: 0.0..1000.0,
                 c: [  0.000000000000e+00,  0.586655087100e-01,  0.450322755820e-04,
                       0.289084072120e-07, -0.330568966520e-09,  0.650244032700e-12,
                      -0.191974955040e-15, -0.125366004970e-17,  0.214892175690e-20,
                      -0.143880417820e-23,  0.359608994810e-27 ] } ],
      j: [ { range: -210.0..760.0,
                 c: [  0.000000000000e+00,  0.503811878150e-01,  0.304758369300e-04,
                      -0.856810657200e-07,  0.132281952950e-09, -0.170529583370e-12,
                       0.209480906970e-15, -0.125383953360e-18,  0.156317256970e-22 ] },
           { range: 760.0..1200.0,
                 c: [  0.296456256810e+03, -0.149761277860e+01,  0.317871039240e-02,
                      -0.318476867010e-05,  0.157208190040e-08, -0.306913690560e-12 ] } ],
      k: [ { range: -270.0..0.0,
                 c: [  0.000000000000e+00,  0.394501280250e-01,  0.236223735980e-04,
                      -0.328589067840e-06, -0.499048287770e-08, -0.675090591730e-10,
                      -0.574103274280e-12, -0.310888728940e-14, -0.104516093650e-16,
                      -0.198892668780e-19, -0.163226974860e-22 ] },
           { range: 0.0..1372.0,
                 c: [ -0.176004136860e-01,  0.389212049750e-01,  0.185587700320e-04,
                      -0.994575928740e-07,  0.318409457190e-09, -0.560728448890e-12,
                       0.560750590590e-15, -0.320207200030e-18,  0.971511471520e-22,
                      -0.121047212750e-25 ],
                 a: [  0.118597600000e+00, -0.118343200000e-03,  0.126968600000e+03 ] } ],
      n: [ { range: -270.0..0.0,
                 c: [  0.000000000000e+00,  0.261591059620e-01,  0.109574842280e-04,
                      -0.938411115540e-07, -0.464120397590e-10, -0.263033577160e-11,
                      -0.226534380030e-13, -0.760893007910e-16, -0.934196678350e-19 ] },
           { range: 0.0..1300.0,
                 c: [  0.000000000000e+00,  0.259293946010e-01,  0.157101418800e-04,
                       0.438256272370e-07, -0.252611697940e-09,  0.643118193390e-12,
                      -0.100634715190e-14,  0.997453389920e-18, -0.608632456070e-21,
                       0.208492293390e-24, -0.306821961510e-28 ] } ],
      r: [ { range: -50.0..1064.18,
                 c: [  0.000000000000e+00,  0.528961729765e-02,  0.139166589782e-04,
                      -0.238855693017e-07,  0.356916001063e-10, -0.462347666298e-13,
                       0.500777441034e-16, -0.373105886191e-19,  0.157716482367e-22,
                      -0.281038625251e-26 ] },
           { range: 1064.18..1664.50,
                 c: [  0.295157925316e+01, -0.252061251332e-02,  0.159564501865e-04,
                      -0.764085947576e-08,  0.205305291024e-11, -0.293359668173e-15 ] },
           { range: 1664.50..1768.10,
                 c: [  0.152232118209e+03, -0.268819888545e+00,  0.171280280471e-03,
                      -0.345895706453e-07, -0.934633971046e-14 ] } ],
      s: [ { range: -50.0..1064.18,
                 c: [  0.000000000000e+00,  0.540313308631e-02,  0.125934289740e-04,
                      -0.232477968689e-07,  0.322028823036e-10, -0.331465196389e-13,
                       0.255744251786e-16, -0.125068871393e-19,  0.271443176145e-23 ] },
           { range: 1064.18..1664.50,
                 c: [  0.132900444085e+01,  0.334509311344e-02,  0.654805192818e-05,
                      -0.164856259209e-08,  0.129989605174e-13 ] },
           { range: 1664.50..1768.10,
                 c: [  0.146628232636e+03, -0.258430516752e+00,  0.163693574641e-03,
                      -0.330439046987e-07, -0.943223690612e-14 ] } ],
      t: [ { range: -270.0..0.0,
                 c: [  0.000000000000e+00, 0.387481063640e-01, 0.441944343470e-04,
                       0.118443231050e-06, 0.200329735540e-07, 0.901380195590e-09,
                       0.226511565930e-10, 0.360711542050e-12, 0.384939398830e-14,
                       0.282135219250e-16, 0.142515947790e-18, 0.487686622860e-21,
                       0.107955392700e-23, 0.139450270620e-26, 0.797951539270e-30 ] },
           { range: 0.0..400.0,
                 c: [  0.000000000000e+00, 0.387481063640e-01, 0.332922278800e-04,
                       0.206182434040e-06, -0.218822568460e-08, 0.109968809280e-10,
                      -0.308157587720e-13, 0.454791352900e-16, -0.275129016730e-19 ] } ]
    }
  TEMPERATURE_EQUATIONS  = 
    { 
      b: [ { range: 0.291..2.431,
                 d: [  9.8423321e+01,  6.9971500e+02, -8.4765304e+02,  
                       1.0052644e+03, -8.3345952e+02,  4.5508542e+02,  
                      -1.5523037e+02,  2.9886750e+01, -2.4742860e+00 ] }, 
           { range: 2.431..13.820,
                 d: [  2.1315071e+02,  2.8510504e+02, -5.2742887e+01,
                       9.9160804e+00, -1.2965303e+00,  1.1195870e-01,
                      -6.0625199e-03,  1.8661696e-04, -2.4878585e-06 ] } ]
    }


  def self.emf(tc, t, skip_check = false)
    EMF_EQUATIONS[tc.kind].each do |equation|
      if equation[:range].include? t
        result  = equation[:c].each_with_index.map{ |c,i| c*t**i }.inject(:+)
        result += equation[:a][0] * Math.exp(equation[:a][1] * (t - equation[:a][2])**2) if equation[:a]
        return result
      end
    end
    raise RangeError
  end

  def self.temperature(tc, e, max_error = 0.001)
    return 0.0 if e == 0.0
    t_calc = approximate_temperature(tc, e)
    e_calc = e
    MAX_ITERATIONS.times do
      e_calc = emf(tc, t_calc, true)
      e_aux = 1.001 * e_calc
      t_aux  = approximate_temperature(tc, e_aux)
      slope  = (e_calc - e_aux) / (t_calc - t_aux)
      if (e_calc - e).abs < slope * max_error
        #raise RangeError unless VALID_RANGE.include?(t_calc)
        return t_calc
      end
      t_calc -= (e_calc - e) / slope
    end
    raise StopIteration


#    '  Check slope at temperature (based on neighbourhood of de Â±0,1%)
#    S = (IIf(V = 0, 0.1, V) - Vaux) / (TemperaturaTermopar - Taux)
#    ' Following iterations
#    For i = 1 To MAX_ITER
#      Vref = FemTermoparOpt(TemperaturaTermopar, TCType, False)
#      If Abs(Vref - V) < S * err Then Exit For
#      TemperaturaTermopar = TemperaturaTermopar - (Vref - V) / S
#    Next i
#    ' Check non-convergence
#     If i = MAX_ITER + 1 Then TemperaturaTermopar = 1E+32'''


  end

  def self.approximate_temperature(tc, e)
    TEMPERATURE_EQUATIONS[tc.kind].each do |equation|
      if equation[:range].include? e
        result  = equation[:d].each_with_index.map{ |d,i| d*e**i }.inject(:+)
        #result += equation[:a][0] * Math.exp(equation[:a][1] * (t - equation[:a][2])**2) if equation[:a]
        return result
      end
    end
    raise RangeError
  end
end
